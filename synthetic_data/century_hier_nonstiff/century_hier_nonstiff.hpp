// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace century_hier_nonstiff_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
century_model(const T0__& t,
                  const std::vector<T1__>& C,
                  const std::vector<T2__>& theta,
                  const std::vector<T3__>& x_r,
                  const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            vector<fun_scalar_t__> k(3);
            stan::math::initialize(k, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(k,DUMMY_VAR__);
            fun_scalar_t__ a21;
            (void) a21;  // dummy to suppress unused var warning
            stan::math::initialize(a21, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a21,DUMMY_VAR__);
            fun_scalar_t__ a31;
            (void) a31;  // dummy to suppress unused var warning
            stan::math::initialize(a31, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a31,DUMMY_VAR__);
            fun_scalar_t__ a12;
            (void) a12;  // dummy to suppress unused var warning
            stan::math::initialize(a12, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a12,DUMMY_VAR__);
            fun_scalar_t__ a32;
            (void) a32;  // dummy to suppress unused var warning
            stan::math::initialize(a32, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a32,DUMMY_VAR__);
            fun_scalar_t__ a13;
            (void) a13;  // dummy to suppress unused var warning
            stan::math::initialize(a13, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a13,DUMMY_VAR__);
            vector<fun_scalar_t__> dC_dt(3);
            stan::math::initialize(dC_dt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(dC_dt,DUMMY_VAR__);


            current_statement_begin__ = 20;
            stan::math::assign(k, stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "theta"));
            current_statement_begin__ = 21;
            stan::math::assign(a21, get_base1(theta,4,"theta",1));
            current_statement_begin__ = 22;
            stan::math::assign(a31, get_base1(theta,5,"theta",1));
            current_statement_begin__ = 23;
            stan::math::assign(a12, get_base1(theta,6,"theta",1));
            current_statement_begin__ = 24;
            stan::math::assign(a32, get_base1(theta,7,"theta",1));
            current_statement_begin__ = 25;
            stan::math::assign(a13, get_base1(theta,8,"theta",1));
            current_statement_begin__ = 26;
            stan::math::assign(get_base1_lhs(dC_dt,1,"dC_dt",1), (((-(get_base1(k,1,"k",1)) * get_base1(C,1,"C",1)) + ((a12 * get_base1(k,2,"k",1)) * get_base1(C,2,"C",1))) + ((a13 * get_base1(k,3,"k",1)) * get_base1(C,3,"C",1))));
            current_statement_begin__ = 27;
            stan::math::assign(get_base1_lhs(dC_dt,2,"dC_dt",1), ((-(get_base1(k,2,"k",1)) * get_base1(C,2,"C",1)) + ((a21 * get_base1(k,1,"k",1)) * get_base1(C,1,"C",1))));
            current_statement_begin__ = 28;
            stan::math::assign(get_base1_lhs(dC_dt,3,"dC_dt",1), (((-(get_base1(k,3,"k",1)) * get_base1(C,3,"C",1)) + ((a31 * get_base1(k,1,"k",1)) * get_base1(C,1,"C",1))) + ((a32 * get_base1(k,2,"k",1)) * get_base1(C,2,"C",1))));
            current_statement_begin__ = 29;
            return stan::math::promote_scalar<fun_return_scalar_t__>(dC_dt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct century_model_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
                  const std::vector<T1__>& C,
                  const std::vector<T2__>& theta,
                  const std::vector<T3__>& x_r,
                  const std::vector<int>& x_i, std::ostream* pstream__) const {
        return century_model(t, C, theta, x_r, x_i, pstream__);
    }
};

template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T11__>::type>::type>::type, Eigen::Dynamic,1>
evolved_CO2(const int& N_t,
                const T1__& t0,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& ts,
                const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                const T4__& totalC_t0,
                const Eigen::Matrix<T5__, Eigen::Dynamic,1>& k,
                const T6__& a21,
                const T7__& a31,
                const T8__& a12,
                const T9__& a32,
                const T10__& a13,
                const std::vector<T11__>& x_r,
                const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T11__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            vector<fun_scalar_t__> C_t0(3);
            stan::math::initialize(C_t0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_t0,DUMMY_VAR__);
            vector<fun_scalar_t__> theta(8);
            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);
            vector<vector<fun_scalar_t__> > C_t(N_t, (vector<fun_scalar_t__>(3)));
            stan::math::initialize(C_t, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_t,DUMMY_VAR__);
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  CO2_t(static_cast<Eigen::VectorXd::Index>(N_t));
            (void) CO2_t;  // dummy to suppress unused var warning
            stan::math::initialize(CO2_t, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(CO2_t,DUMMY_VAR__);


            current_statement_begin__ = 58;
            stan::math::assign(C_t0, to_array_1d(multiply(gamma,totalC_t0)));
            current_statement_begin__ = 59;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), 
                        to_array_1d(k), 
                        "assigning variable theta");
            current_statement_begin__ = 60;
            stan::math::assign(get_base1_lhs(theta,4,"theta",1), a21);
            current_statement_begin__ = 61;
            stan::math::assign(get_base1_lhs(theta,5,"theta",1), a31);
            current_statement_begin__ = 62;
            stan::math::assign(get_base1_lhs(theta,6,"theta",1), a12);
            current_statement_begin__ = 63;
            stan::math::assign(get_base1_lhs(theta,7,"theta",1), a32);
            current_statement_begin__ = 64;
            stan::math::assign(get_base1_lhs(theta,8,"theta",1), a13);
            current_statement_begin__ = 65;
            stan::math::assign(C_t, integrate_ode_rk45(century_model_functor__(), C_t0, t0, to_array_1d(ts), theta, x_r, x_i, pstream__));
            current_statement_begin__ = 67;
            for (int t = 1; t <= N_t; ++t) {
                current_statement_begin__ = 68;
                stan::math::assign(get_base1_lhs(CO2_t,t,"CO2_t",1), (totalC_t0 - sum(get_base1(C_t,t,"C_t",1))));
            }
            current_statement_begin__ = 69;
            return stan::math::promote_scalar<fun_return_scalar_t__>(CO2_t);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct evolved_CO2_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T11__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const int& N_t,
                const T1__& t0,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& ts,
                const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                const T4__& totalC_t0,
                const Eigen::Matrix<T5__, Eigen::Dynamic,1>& k,
                const T6__& a21,
                const T7__& a31,
                const T8__& a12,
                const T9__& a32,
                const T10__& a13,
                const std::vector<T11__>& x_r,
                const std::vector<int>& x_i, std::ostream* pstream__) const {
        return evolved_CO2(N_t, t0, ts, gamma, totalC_t0, k, a21, a31, a12, a32, a13, x_r, x_i, pstream__);
    }
};

class century_hier_nonstiff_model : public prob_grad {
private:
    double totalC_t0;
    double t0;
    int N_t;
    int num_rep;
    vector_d t_meas;
    vector_d t_cap;
    matrix_d CO2_flux;
    vector<double> x_r;
    vector<int> x_i;
public:
    century_hier_nonstiff_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    century_hier_nonstiff_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "century_hier_nonstiff_model_namespace::century_hier_nonstiff_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "totalC_t0", "double", context__.to_vec());
        totalC_t0 = double(0);
        vals_r__ = context__.vals_r("totalC_t0");
        pos__ = 0;
        totalC_t0 = vals_r__[pos__++];
        context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
        t0 = double(0);
        vals_r__ = context__.vals_r("t0");
        pos__ = 0;
        t0 = vals_r__[pos__++];
        context__.validate_dims("data initialization", "N_t", "int", context__.to_vec());
        N_t = int(0);
        vals_i__ = context__.vals_i("N_t");
        pos__ = 0;
        N_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "num_rep", "int", context__.to_vec());
        num_rep = int(0);
        vals_i__ = context__.vals_i("num_rep");
        pos__ = 0;
        num_rep = vals_i__[pos__++];
        validate_non_negative_index("t_meas", "N_t", N_t);
        t_meas = vector_d(static_cast<Eigen::VectorXd::Index>(N_t));
        context__.validate_dims("data initialization", "t_meas", "vector_d", context__.to_vec(N_t));
        vals_r__ = context__.vals_r("t_meas");
        pos__ = 0;
        size_t t_meas_i_vec_lim__ = N_t;
        for (size_t i_vec__ = 0; i_vec__ < t_meas_i_vec_lim__; ++i_vec__) {
            t_meas[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("t_cap", "N_t", N_t);
        t_cap = vector_d(static_cast<Eigen::VectorXd::Index>(N_t));
        context__.validate_dims("data initialization", "t_cap", "vector_d", context__.to_vec(N_t));
        vals_r__ = context__.vals_r("t_cap");
        pos__ = 0;
        size_t t_cap_i_vec_lim__ = N_t;
        for (size_t i_vec__ = 0; i_vec__ < t_cap_i_vec_lim__; ++i_vec__) {
            t_cap[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "CO2_flux", "matrix_d", context__.to_vec(N_t,num_rep));
        validate_non_negative_index("CO2_flux", "N_t", N_t);
        validate_non_negative_index("CO2_flux", "num_rep", num_rep);
        CO2_flux = matrix_d(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        vals_r__ = context__.vals_r("CO2_flux");
        pos__ = 0;
        size_t CO2_flux_m_mat_lim__ = N_t;
        size_t CO2_flux_n_mat_lim__ = num_rep;
        for (size_t n_mat__ = 0; n_mat__ < CO2_flux_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < CO2_flux_m_mat_lim__; ++m_mat__) {
                CO2_flux(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"totalC_t0",totalC_t0,0);
        check_greater_or_equal(function__,"N_t",N_t,0);
        check_greater_or_equal(function__,"num_rep",num_rep,0);
        check_greater_or_equal(function__,"t_meas",t_meas,t0);
        check_greater_or_equal(function__,"t_cap",t_cap,t0);
        check_greater_or_equal(function__,"CO2_flux",CO2_flux,0);
        // initialize data variables
        validate_non_negative_index("x_r", "0", 0);
        x_r = std::vector<double>(0,double(0));
        stan::math::fill(x_r,DUMMY_VAR__);
        validate_non_negative_index("x_i", "0", 0);
        x_i = std::vector<int>(0,int(0));
        stan::math::fill(x_i, std::numeric_limits<int>::min());

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += 3;
        num_params_r__ += (3 - 1);
        num_params_r__ += 3;
        ++num_params_r__;
        num_params_r__ += (3 - 1) * num_rep;
        num_params_r__ += (3 - 1) * num_rep;
        num_params_r__ += (3 - 1) * num_rep;
        num_params_r__ += (3 - 1);
        num_params_r__ += (3 - 1);
        num_params_r__ += (3 - 1);
        ++num_params_r__;
    }

    ~century_hier_nonstiff_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("turnover")))
            throw std::runtime_error("variable turnover missing");
        vals_r__ = context__.vals_r("turnover");
        pos__ = 0U;
        context__.validate_dims("initialization", "turnover", "vector_d", context__.to_vec(3));
        // generate_declaration turnover
        vector_d turnover(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            turnover(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,turnover);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable turnover: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "vector_d", context__.to_vec(3));
        // generate_declaration gamma
        vector_d gamma(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(3));
        // generate_declaration sigma
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("A1")))
            throw std::runtime_error("variable A1 missing");
        vals_r__ = context__.vals_r("A1");
        pos__ = 0U;
        context__.validate_dims("initialization", "A1", "vector_d", context__.to_vec(num_rep,3));
        // generate_declaration A1
        std::vector<vector_d> A1(num_rep,vector_d(static_cast<Eigen::VectorXd::Index>(3)));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            for (int i0__ = 0U; i0__ < num_rep; ++i0__)
                A1[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < num_rep; ++i0__)
            try {
            writer__.simplex_unconstrain(A1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A1: ") + e.what());
        }

        if (!(context__.contains_r("A2")))
            throw std::runtime_error("variable A2 missing");
        vals_r__ = context__.vals_r("A2");
        pos__ = 0U;
        context__.validate_dims("initialization", "A2", "vector_d", context__.to_vec(num_rep,3));
        // generate_declaration A2
        std::vector<vector_d> A2(num_rep,vector_d(static_cast<Eigen::VectorXd::Index>(3)));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            for (int i0__ = 0U; i0__ < num_rep; ++i0__)
                A2[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < num_rep; ++i0__)
            try {
            writer__.simplex_unconstrain(A2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A2: ") + e.what());
        }

        if (!(context__.contains_r("A3")))
            throw std::runtime_error("variable A3 missing");
        vals_r__ = context__.vals_r("A3");
        pos__ = 0U;
        context__.validate_dims("initialization", "A3", "vector_d", context__.to_vec(num_rep,3));
        // generate_declaration A3
        std::vector<vector_d> A3(num_rep,vector_d(static_cast<Eigen::VectorXd::Index>(3)));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            for (int i0__ = 0U; i0__ < num_rep; ++i0__)
                A3[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < num_rep; ++i0__)
            try {
            writer__.simplex_unconstrain(A3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A3: ") + e.what());
        }

        if (!(context__.contains_r("A1_g")))
            throw std::runtime_error("variable A1_g missing");
        vals_r__ = context__.vals_r("A1_g");
        pos__ = 0U;
        context__.validate_dims("initialization", "A1_g", "vector_d", context__.to_vec(3));
        // generate_declaration A1_g
        vector_d A1_g(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            A1_g(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(A1_g);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A1_g: ") + e.what());
        }

        if (!(context__.contains_r("A2_g")))
            throw std::runtime_error("variable A2_g missing");
        vals_r__ = context__.vals_r("A2_g");
        pos__ = 0U;
        context__.validate_dims("initialization", "A2_g", "vector_d", context__.to_vec(3));
        // generate_declaration A2_g
        vector_d A2_g(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            A2_g(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(A2_g);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A2_g: ") + e.what());
        }

        if (!(context__.contains_r("A3_g")))
            throw std::runtime_error("variable A3_g missing");
        vals_r__ = context__.vals_r("A3_g");
        pos__ = 0U;
        context__.validate_dims("initialization", "A3_g", "vector_d", context__.to_vec(3));
        // generate_declaration A3_g
        vector_d A3_g(static_cast<Eigen::VectorXd::Index>(3));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            A3_g(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(A3_g);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A3_g: ") + e.what());
        }

        if (!(context__.contains_r("kappa")))
            throw std::runtime_error("variable kappa missing");
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        context__.validate_dims("initialization", "kappa", "double", context__.to_vec());
        // generate_declaration kappa
        double kappa(0);
        kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1,kappa);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable kappa: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  turnover;
        (void) turnover;  // dummy to suppress unused var warning
        if (jacobian__)
            turnover = in__.vector_lb_constrain(0,3,lp__);
        else
            turnover = in__.vector_lb_constrain(0,3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  gamma;
        (void) gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            gamma = in__.simplex_constrain(3,lp__);
        else
            gamma = in__.simplex_constrain(3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,3,lp__);
        else
            sigma = in__.vector_lb_constrain(0,3);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > A1;
        size_t dim_A1_0__ = num_rep;
        A1.reserve(dim_A1_0__);
        for (size_t k_0__ = 0; k_0__ < dim_A1_0__; ++k_0__) {
            if (jacobian__)
                A1.push_back(in__.simplex_constrain(3,lp__));
            else
                A1.push_back(in__.simplex_constrain(3));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > A2;
        size_t dim_A2_0__ = num_rep;
        A2.reserve(dim_A2_0__);
        for (size_t k_0__ = 0; k_0__ < dim_A2_0__; ++k_0__) {
            if (jacobian__)
                A2.push_back(in__.simplex_constrain(3,lp__));
            else
                A2.push_back(in__.simplex_constrain(3));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > A3;
        size_t dim_A3_0__ = num_rep;
        A3.reserve(dim_A3_0__);
        for (size_t k_0__ = 0; k_0__ < dim_A3_0__; ++k_0__) {
            if (jacobian__)
                A3.push_back(in__.simplex_constrain(3,lp__));
            else
                A3.push_back(in__.simplex_constrain(3));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  A1_g;
        (void) A1_g;  // dummy to suppress unused var warning
        if (jacobian__)
            A1_g = in__.simplex_constrain(3,lp__);
        else
            A1_g = in__.simplex_constrain(3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  A2_g;
        (void) A2_g;  // dummy to suppress unused var warning
        if (jacobian__)
            A2_g = in__.simplex_constrain(3,lp__);
        else
            A2_g = in__.simplex_constrain(3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  A3_g;
        (void) A3_g;  // dummy to suppress unused var warning
        if (jacobian__)
            A3_g = in__.simplex_constrain(3,lp__);
        else
            A3_g = in__.simplex_constrain(3);

        T__ kappa;
        (void) kappa;  // dummy to suppress unused var warning
        if (jacobian__)
            kappa = in__.scalar_lb_constrain(1,lp__);
        else
            kappa = in__.scalar_lb_constrain(1);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  k(static_cast<Eigen::VectorXd::Index>(3));
        (void) k;  // dummy to suppress unused var warning
        stan::math::initialize(k, DUMMY_VAR__);
        stan::math::fill(k,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  CO2_meas(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_meas;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_meas, DUMMY_VAR__);
        stan::math::fill(CO2_meas,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  CO2_cap(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_cap;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_cap, DUMMY_VAR__);
        stan::math::fill(CO2_cap,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  CO2_flux_hat(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_flux_hat;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_flux_hat, DUMMY_VAR__);
        stan::math::fill(CO2_flux_hat,DUMMY_VAR__);
        vector<T__> a21(num_rep);
        stan::math::initialize(a21, DUMMY_VAR__);
        stan::math::fill(a21,DUMMY_VAR__);
        vector<T__> a31(num_rep);
        stan::math::initialize(a31, DUMMY_VAR__);
        stan::math::fill(a31,DUMMY_VAR__);
        vector<T__> a12(num_rep);
        stan::math::initialize(a12, DUMMY_VAR__);
        stan::math::fill(a12,DUMMY_VAR__);
        vector<T__> a32(num_rep);
        stan::math::initialize(a32, DUMMY_VAR__);
        stan::math::fill(a32,DUMMY_VAR__);
        vector<T__> a13(num_rep);
        stan::math::initialize(a13, DUMMY_VAR__);
        stan::math::fill(a13,DUMMY_VAR__);


        try {
            current_statement_begin__ = 108;
            stan::math::assign(k, elt_divide(1.0,turnover));
            current_statement_begin__ = 110;
            for (int i = 1; i <= num_rep; ++i) {

                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(a21,i,"a21",1), get_base1(get_base1(A1,i,"A1",1),2,"A1",2));
                current_statement_begin__ = 112;
                stan::math::assign(get_base1_lhs(a31,i,"a31",1), get_base1(get_base1(A1,i,"A1",1),3,"A1",2));
                current_statement_begin__ = 113;
                stan::math::assign(get_base1_lhs(a12,i,"a12",1), get_base1(get_base1(A2,i,"A2",1),1,"A2",2));
                current_statement_begin__ = 114;
                stan::math::assign(get_base1_lhs(a32,i,"a32",1), get_base1(get_base1(A2,i,"A2",1),3,"A2",2));
                current_statement_begin__ = 115;
                stan::math::assign(get_base1_lhs(a13,i,"a13",1), get_base1(get_base1(A3,i,"A3",1),1,"A3",2));
            }
            current_statement_begin__ = 117;
            for (int i = 1; i <= num_rep; ++i) {

                current_statement_begin__ = 118;
                stan::model::assign(CO2_meas, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            evolved_CO2(N_t,t0,t_meas,gamma,totalC_t0,k,get_base1(a21,i,"a21",1),get_base1(a31,i,"a31",1),get_base1(a12,i,"a12",1),get_base1(a32,i,"a32",1),get_base1(a13,i,"a13",1),x_r,x_i, pstream__), 
                            "assigning variable CO2_meas");
                current_statement_begin__ = 121;
                stan::model::assign(CO2_cap, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            evolved_CO2(N_t,t0,t_cap,gamma,totalC_t0,k,get_base1(a21,i,"a21",1),get_base1(a31,i,"a31",1),get_base1(a12,i,"a12",1),get_base1(a32,i,"a32",1),get_base1(a13,i,"a13",1),x_r,x_i, pstream__), 
                            "assigning variable CO2_cap");
                current_statement_begin__ = 124;
                stan::model::assign(CO2_flux_hat, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            elt_divide(subtract(stan::model::rvalue(CO2_meas, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "CO2_meas"),stan::model::rvalue(CO2_cap, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "CO2_cap")),subtract(t_meas,t_cap)), 
                            "assigning variable CO2_flux_hat");
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < 3; ++i0__) {
            if (stan::math::is_uninitialized(k(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N_t; ++i0__) {
            for (int i1__ = 0; i1__ < num_rep; ++i1__) {
                if (stan::math::is_uninitialized(CO2_meas(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: CO2_meas" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N_t; ++i0__) {
            for (int i1__ = 0; i1__ < num_rep; ++i1__) {
                if (stan::math::is_uninitialized(CO2_cap(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: CO2_cap" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N_t; ++i0__) {
            for (int i1__ = 0; i1__ < num_rep; ++i1__) {
                if (stan::math::is_uninitialized(CO2_flux_hat(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: CO2_flux_hat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < num_rep; ++i0__) {
            if (stan::math::is_uninitialized(a21[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a21" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < num_rep; ++i0__) {
            if (stan::math::is_uninitialized(a31[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a31" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < num_rep; ++i0__) {
            if (stan::math::is_uninitialized(a12[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a12" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < num_rep; ++i0__) {
            if (stan::math::is_uninitialized(a32[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a32" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < num_rep; ++i0__) {
            if (stan::math::is_uninitialized(a13[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a13" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"k",k,0);
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a21[k0__]",a21[k0__],0);
            check_less_or_equal(function__,"a21[k0__]",a21[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a31[k0__]",a31[k0__],0);
            check_less_or_equal(function__,"a31[k0__]",a31[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a12[k0__]",a12[k0__],0);
            check_less_or_equal(function__,"a12[k0__]",a12[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a32[k0__]",a32[k0__],0);
            check_less_or_equal(function__,"a32[k0__]",a32[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a13[k0__]",a13[k0__],0);
            check_less_or_equal(function__,"a13[k0__]",a13[k0__],1);
        }

        // model body
        try {

            current_statement_begin__ = 129;
            lp_accum__.add(normal_log<propto__>(get_base1(turnover,1,"turnover",1), 1.5, (0.14999999999999999 * get_base1(sigma,1,"sigma",1))));
            current_statement_begin__ = 130;
            lp_accum__.add(normal_log<propto__>(get_base1(turnover,2,"turnover",1), 25, (2.5 * get_base1(sigma,2,"sigma",1))));
            current_statement_begin__ = 131;
            lp_accum__.add(normal_log<propto__>(get_base1(turnover,3,"turnover",1), 1000, (100 * get_base1(sigma,3,"sigma",1))));
            current_statement_begin__ = 132;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 133;
            lp_accum__.add(cauchy_log<propto__>(sigma_obs, 0, 0.10000000000000001));
            current_statement_begin__ = 134;
            lp_accum__.add(normal_log<propto__>(kappa, 10, 5));
            current_statement_begin__ = 135;
            for (int i = 1; i <= num_rep; ++i) {

                current_statement_begin__ = 136;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(A1,i,"A1",1), multiply(kappa,A1_g)));
                current_statement_begin__ = 137;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(A2,i,"A2",1), multiply(kappa,A2_g)));
                current_statement_begin__ = 138;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(A3,i,"A3",1), multiply(kappa,A3_g)));
            }
            current_statement_begin__ = 142;
            lp_accum__.add(lognormal_log<propto__>(to_vector(CO2_flux), to_vector(log(CO2_flux_hat)), sigma_obs));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("turnover");
        names__.push_back("gamma");
        names__.push_back("sigma");
        names__.push_back("sigma_obs");
        names__.push_back("A1");
        names__.push_back("A2");
        names__.push_back("A3");
        names__.push_back("A1_g");
        names__.push_back("A2_g");
        names__.push_back("A3_g");
        names__.push_back("kappa");
        names__.push_back("k");
        names__.push_back("CO2_meas");
        names__.push_back("CO2_cap");
        names__.push_back("CO2_flux_hat");
        names__.push_back("a21");
        names__.push_back("a31");
        names__.push_back("a12");
        names__.push_back("a32");
        names__.push_back("a13");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_t);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_t);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_t);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_rep);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "century_hier_nonstiff_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d turnover = in__.vector_lb_constrain(0,3);
        vector_d gamma = in__.simplex_constrain(3);
        vector_d sigma = in__.vector_lb_constrain(0,3);
        double sigma_obs = in__.scalar_lb_constrain(0);
        vector<vector_d> A1;
        size_t dim_A1_0__ = num_rep;
        for (size_t k_0__ = 0; k_0__ < dim_A1_0__; ++k_0__) {
            A1.push_back(in__.simplex_constrain(3));
        }
        vector<vector_d> A2;
        size_t dim_A2_0__ = num_rep;
        for (size_t k_0__ = 0; k_0__ < dim_A2_0__; ++k_0__) {
            A2.push_back(in__.simplex_constrain(3));
        }
        vector<vector_d> A3;
        size_t dim_A3_0__ = num_rep;
        for (size_t k_0__ = 0; k_0__ < dim_A3_0__; ++k_0__) {
            A3.push_back(in__.simplex_constrain(3));
        }
        vector_d A1_g = in__.simplex_constrain(3);
        vector_d A2_g = in__.simplex_constrain(3);
        vector_d A3_g = in__.simplex_constrain(3);
        double kappa = in__.scalar_lb_constrain(1);
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(turnover[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        vars__.push_back(sigma_obs);
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
                vars__.push_back(A1[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
                vars__.push_back(A2[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
                vars__.push_back(A3[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(A1_g[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(A2_g[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(A3_g[k_0__]);
        }
        vars__.push_back(kappa);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector_d k(static_cast<Eigen::VectorXd::Index>(3));
        (void) k;  // dummy to suppress unused var warning
        stan::math::initialize(k, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k,DUMMY_VAR__);
        matrix_d CO2_meas(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_meas;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_meas, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(CO2_meas,DUMMY_VAR__);
        matrix_d CO2_cap(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_cap;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_cap, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(CO2_cap,DUMMY_VAR__);
        matrix_d CO2_flux_hat(static_cast<Eigen::VectorXd::Index>(N_t),static_cast<Eigen::VectorXd::Index>(num_rep));
        (void) CO2_flux_hat;  // dummy to suppress unused var warning
        stan::math::initialize(CO2_flux_hat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(CO2_flux_hat,DUMMY_VAR__);
        vector<double> a21(num_rep, 0.0);
        stan::math::initialize(a21, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a21,DUMMY_VAR__);
        vector<double> a31(num_rep, 0.0);
        stan::math::initialize(a31, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a31,DUMMY_VAR__);
        vector<double> a12(num_rep, 0.0);
        stan::math::initialize(a12, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a12,DUMMY_VAR__);
        vector<double> a32(num_rep, 0.0);
        stan::math::initialize(a32, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a32,DUMMY_VAR__);
        vector<double> a13(num_rep, 0.0);
        stan::math::initialize(a13, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a13,DUMMY_VAR__);


        try {
            current_statement_begin__ = 108;
            stan::math::assign(k, elt_divide(1.0,turnover));
            current_statement_begin__ = 110;
            for (int i = 1; i <= num_rep; ++i) {

                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(a21,i,"a21",1), get_base1(get_base1(A1,i,"A1",1),2,"A1",2));
                current_statement_begin__ = 112;
                stan::math::assign(get_base1_lhs(a31,i,"a31",1), get_base1(get_base1(A1,i,"A1",1),3,"A1",2));
                current_statement_begin__ = 113;
                stan::math::assign(get_base1_lhs(a12,i,"a12",1), get_base1(get_base1(A2,i,"A2",1),1,"A2",2));
                current_statement_begin__ = 114;
                stan::math::assign(get_base1_lhs(a32,i,"a32",1), get_base1(get_base1(A2,i,"A2",1),3,"A2",2));
                current_statement_begin__ = 115;
                stan::math::assign(get_base1_lhs(a13,i,"a13",1), get_base1(get_base1(A3,i,"A3",1),1,"A3",2));
            }
            current_statement_begin__ = 117;
            for (int i = 1; i <= num_rep; ++i) {

                current_statement_begin__ = 118;
                stan::model::assign(CO2_meas, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            evolved_CO2(N_t,t0,t_meas,gamma,totalC_t0,k,get_base1(a21,i,"a21",1),get_base1(a31,i,"a31",1),get_base1(a12,i,"a12",1),get_base1(a32,i,"a32",1),get_base1(a13,i,"a13",1),x_r,x_i, pstream__), 
                            "assigning variable CO2_meas");
                current_statement_begin__ = 121;
                stan::model::assign(CO2_cap, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            evolved_CO2(N_t,t0,t_cap,gamma,totalC_t0,k,get_base1(a21,i,"a21",1),get_base1(a31,i,"a31",1),get_base1(a12,i,"a12",1),get_base1(a32,i,"a32",1),get_base1(a13,i,"a13",1),x_r,x_i, pstream__), 
                            "assigning variable CO2_cap");
                current_statement_begin__ = 124;
                stan::model::assign(CO2_flux_hat, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            elt_divide(subtract(stan::model::rvalue(CO2_meas, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "CO2_meas"),stan::model::rvalue(CO2_cap, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "CO2_cap")),subtract(t_meas,t_cap)), 
                            "assigning variable CO2_flux_hat");
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"k",k,0);
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a21[k0__]",a21[k0__],0);
            check_less_or_equal(function__,"a21[k0__]",a21[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a31[k0__]",a31[k0__],0);
            check_less_or_equal(function__,"a31[k0__]",a31[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a12[k0__]",a12[k0__],0);
            check_less_or_equal(function__,"a12[k0__]",a12[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a32[k0__]",a32[k0__],0);
            check_less_or_equal(function__,"a32[k0__]",a32[k0__],1);
        }
        for (int k0__ = 0; k0__ < num_rep; ++k0__) {
            check_greater_or_equal(function__,"a13[k0__]",a13[k0__],0);
            check_less_or_equal(function__,"a13[k0__]",a13[k0__],1);
        }

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(k[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < num_rep; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N_t; ++k_0__) {
                vars__.push_back(CO2_meas(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < num_rep; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N_t; ++k_0__) {
                vars__.push_back(CO2_cap(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < num_rep; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N_t; ++k_0__) {
                vars__.push_back(CO2_flux_hat(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
            vars__.push_back(a21[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
            vars__.push_back(a31[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
            vars__.push_back(a12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
            vars__.push_back(a32[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < num_rep; ++k_0__) {
            vars__.push_back(a13[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "century_hier_nonstiff_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "turnover" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A1_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A2_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A3_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_meas" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_cap" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_flux_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a21" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a31" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a32" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "turnover" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (3 - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (3 - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (3 - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (3 - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (3 - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A1_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (3 - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A2_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (3 - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A3_g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_meas" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_cap" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= num_rep; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_t; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CO2_flux_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a21" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a31" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a32" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_rep; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef century_hier_nonstiff_model_namespace::century_hier_nonstiff_model stan_model;

